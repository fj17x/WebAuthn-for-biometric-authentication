import express, { json } from "express"
import { randomBytes } from "crypto"
const app = express()
import cors from "cors"
import * as webauthn from "./webauthn.min.js"
import path from "path"
const __dirname = path.resolve()

//Array used as a database for simplicity.
const arrayDatabase = []

//Mapping for linking each username to Credential Id
const UserMapping = new Map()

//Support CORS and parsing JSON requests.
app.use(cors())
app.use(json())

let nonce

app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname) + "/index.html")
})

//Route for returning a nonce value
app.get("/getNonce", (req, res) => {
  // nonce = randomBytes(16).toString("base64")
  nonce = "56535b13-5d93-4194-a282-f234c1c24500"
  res.send(nonce)
})

//Route for recieving the webauthn registration object.
app.post("/Register", async (req, res) => {
  //registration object is in req.body.
  var registration = req.body

  //returns an object with summary of entire details of the operation.
  const registrationParsed = await webauthn.server.verifyRegistration(
    registration,
    {
      challenge: nonce, // whatever was randomly generated by the server
      origin: () => {
        //allows every origin(not safe)
        return true
      },
      userVerified: true,
    }
  )

  //we have to store this credential id in a database. and next time retreive authentication.credentialId
  arrayDatabase.push(registrationParsed)
  console.log("arrayDatabase: ", arrayDatabase)

  //Link the username to the credential ID
  const username = registration.username
  const id = registration.credential.id
  UserMapping.set(username, id)
  console.log("UserMapping: ", UserMapping)
})

//Route to return the specific credential ID for a username.
app.post("/getUsernameToId", (req, res) => {
  const username = req.body.username
  const id = UserMapping.get(username)
  console.log("id: ", id)
  id ? res.send({ id, nonce }) : res.status(404).send("User not found")
})

//Route for logging in, "authentication" object send from front-end.
app.post("/Login", async (req, res) => {
  const authentication = req.body
  console.log("authentication: ", authentication)

  // Credential key(credential id + public key + algorithm) obtained.
  try {
    const registrationObj = arrayDatabase.find((item) => {
      return item.credential.id === authentication.credentialId
    })
    const credentialKey = registrationObj.credential
    console.log("credentialKey: ", credentialKey)

    //Final check, throws Error if fails, else returns an object.
    const authenticationParsed = await webauthn.server.verifyAuthentication(
      authentication,
      credentialKey,
      {
        challenge: nonce,
        origin: () => {
          //allows every origin(not safe)
          return true
        },
        userVerified: true,
        counter: 0,
      }
    )
    console.log("authenticationParsed: ", authenticationParsed)
    res.status(200).send("Success!")
  } catch (err) {
    res.status(401).send("Check your parameters")
  }
})

//To run server
app.listen(8000, () => {
  console.log("Running on port 8000, test app on:\n http://localhost:8000 ")
})
