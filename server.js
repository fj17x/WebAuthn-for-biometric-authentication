import express, { json } from "express"
import { randomBytes } from "crypto"
const app = express()
import cors from "cors"
import * as webauthn from "./webauthn.min.js"

//Array used as a database for simplicity.
const arrayDatabase = []

//Mapping for linking each username to Id
const UserMapping = new Map()

//Support CORS and parsing JSON requests.
app.use(cors())
app.use(json())

let nonce

//Route for returning a nonce value
app.get("/getNonce", (req, res) => {
  // nonce = randomBytes(16).toString("base64")
  nonce = "56535b13-5d93-4194-a282-f234c1c24500"
  res.send(nonce)
})

//Route for recieving the webauthn registration object.
app.post("/Register", async (req, res) => {
  //registration object is in req.body.
  var registration = req.body

  const expected = {
    challenge: nonce, // whatever was randomly generated by the server
    origin: "http://localhost:5500",
    userVerified: true,
  }

  //returns an object with summary of entire details of the operation.
  const registrationParsed = await webauthn.server.verifyRegistration(
    registration,
    expected
  )

  //we have to store this credential id in a database. and next time retreive authentication.credentialId
  arrayDatabase.push(registrationParsed)
  console.log("arrayDatabase: ", arrayDatabase)

  const username = registration.username
  const id = registration.credential.id
  UserMapping.set(username, id)
  console.log("UserMapping: ", UserMapping)
})

app.post("/getUsernameToId", (req, res) => {
  const username = req.body.username
  const id = UserMapping.get(username)
  console.log("id: ", id)
  id ? res.send({ id, nonce }) : res.status(404).send("User not found")
})

app.post("/Login", async (req, res) => {
  const authentication = req.body
  console.log("authentication: ", authentication)

  // CredentialKey obtained from database by looking up `authentication.credentialId`
  try {
    const registrationObj = arrayDatabase.find((item) => {
      return item.credential.id === authentication.credentialId
    })

    const credentialKey = registrationObj.credential
    console.log("credentialKey: ", credentialKey)

    const expected = {
      challenge: nonce, // whatever was randomly generated by the server.
      origin: "http://localhost:5500",
      userVerified: true, // should be set if `userVerification` was set to `required` in the authentication options (default)
      counter: 0, // for enhanced security, you can store the number of times this authenticator was used and ensure it increases each time
    }

    const authenticationParsed = await webauthn.server.verifyAuthentication(
      authentication,
      credentialKey,
      expected
    )
    console.log("authenticationParsed: ", authenticationParsed)
    res.status(200).send("Success!")
  } catch (err) {
    res.status(401).send("Check your parameters")
  }
})

//To run server
app.listen(8000, () => {
  console.log("Running 8000")
})
