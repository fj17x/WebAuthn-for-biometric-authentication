import express, { json } from "express"
import { randomBytes } from "crypto"
const app = express()
import cors from "cors"
import * as webauthn from "./webauthn.min.js"

//Support CORS and parsing JSON requests.
app.use(cors())
app.use(json())

//Route for returning a nonce value
app.get("/getNonce", (req, res) => {
  let nonce = randomBytes(16).toString("base64")
  res.send(nonce)
})

//Route for recieving the webauthn registration object.
app.post("/Register", async (req, res) => {
  //registration object is in req.body.
  var registration = req.body

  const expected = {
    challenge: "a7c61ef9-dc23-4806-b486-2428938a547e", // whatever was randomly generated by the server
    origin: "http://localhost:5500",
    userVerified: true,
  }

  //returns an object with entire details of the operation.
  const registrationParsed = await webauthn.server.verifyRegistration(
    registration,
    expected
  )

  //we have to store this credential id in a database. and next time retreive authentication.credentialId
  console.log(registrationParsed)
})

app.post("/Login", async (req, res) => {
	
	const credentialKey = {
    // obtained from database by looking up `authentication.credentialId`
    id: "3924HhJdJMy_svnUowT8eoXrOOO6NLP8SK85q2RPxdU",
    publicKey:
      "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEgyYqQmUAmDn9J7dR5xl-HlyAA0R2XV5sgQRnSGXbLt_xCrEdD1IVvvkyTmRD16y9p3C2O4PTZ0OF_ZYD2JgTVA==",
    algorithm: "ES256",
  }

  const expected = {
    challenge: "56535b13-5d93-4194-a282-f234c1c24500", // whatever was randomly generated by the server.
    origin: "http://localhost:8080",
    userVerified: true, // should be set if `userVerification` was set to `required` in the authentication options (default)
    counter: 0, // for enhanced security, you can store the number of times this authenticator was used and ensure it increases each time
  }

  const authenticationParsed = await server.verifyAuthentication(
    authentication,
    credentialKey,
    expected
  )
})

//To run server
app.listen(8000, () => {
  console.log("Running 8000")
})
